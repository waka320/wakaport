@use "sass:color";
@use "sass:meta";

@function calculate-grid-color($base-color, $variation: 10%) {
    @if meta.type-of($base-color)=='color' {
        @return color.adjust($base-color, $lightness: $variation);
    }

    @else {
        @return color.adjust(#000, $lightness: $variation);
    }
}



.grid-background {
    $grid-size: 24px;
    $thick-line-interval: 5; // 5マスおきに

    background-size: #{$grid-size} #{$grid-size},
    #{$grid-size} #{$grid-size},
    #{$grid-size * $thick-line-interval} #{$grid-size * $thick-line-interval},
    #{$grid-size * $thick-line-interval} #{$grid-size * $thick-line-interval};

    background-position: center center;
    background-repeat: repeat;

    $grid-color-light: #ffffff;
    $grid-color-dark: #121212;
    $line-color: #ededed;
    $line-color-dark: rgba(237, 237, 237, 0.3);

    background-image: linear-gradient(0deg, transparent calc(100% - 1px), #{$line-color} calc(100% - 1px)),
    linear-gradient(90deg, transparent calc(100% - 1px), #{$line-color} calc(100% - 1px)),
    linear-gradient(0deg, #{$grid-color-light} 0%, #{$grid-color-light} 100%),
    linear-gradient(90deg, #{$grid-color-light} 0%, #{$grid-color-light} 100%);


    // dark-themeクラスをdarkに変更して統一
    &.dark {
        background-image: linear-gradient(0deg, transparent calc(100% - 1px), #{$line-color-dark} calc(100% - 1px)),
        linear-gradient(90deg, transparent calc(100% - 1px), #{$line-color-dark} calc(100% - 1px)),
        linear-gradient(0deg, #{$grid-color-dark} 0%, #{$grid-color-dark} 100%),
        linear-gradient(90deg, #{$grid-color-dark} 0%, #{$grid-color-dark} 100%);
    }


    & {

        .white-background {
            position: relative;
            width: 100%;
            background-color: rgba(var(--background-rgb), 0.6);
            backdrop-filter: blur(3px) saturate(1.05);
            border: 1px solid rgba(var(--foreground-rgb), 0.1);
            box-shadow: 0 4px 6px rgba(var(--foreground-rgb), 0.2);
            min-height: 100vh;
            color: var(--foreground);

            /* subtle noise over content area */
            &::after {
                content: "";
                position: absolute;
                inset: 0;
                pointer-events: none;
                background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='160' height='160'><filter id='n'><feTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='3' stitchTiles='stitch'/><feColorMatrix type='saturate' values='0'/><feComponentTransfer><feFuncA type='table' tableValues='0 0 0 0 0.02 0.04 0.06 0.08 0.1'/></feComponentTransfer></filter><rect width='100%' height='100%' filter='url(%23n)'/></svg>");
                opacity: 0.08;
                mix-blend-mode: overlay;
            }

            .content-background {
                background-color: var(--background);
                color: var(--foreground);
                max-width: 800px;
                width: 90%;
                margin: 2rem auto;
                padding: 2rem;
                border-radius: 0.5rem;
                box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
                transition: box-shadow 0.3s ease;

                &:hover {
                    box-shadow: 0 15px 20px -5px rgba(0, 0, 0, 0.15);
                }
            }

            .article-background {
                background-color: var(--background);
                color: var(--foreground);
                max-width: 800px;

                margin: 1rem auto;
                padding: 0.5rem;
                border-radius: 0.5rem;
                box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
                transition: box-shadow 0.3s ease;

                &:hover {
                    box-shadow: 0 15px 20px -5px rgba(0, 0, 0, 0.15);
                }
            }
        }
    }

    /* Psychedelic overlay (MOTHER2-like) */
    &.psy::before {
        content: "";
        position: fixed;
        inset: 0;
        pointer-events: none;
        background: conic-gradient(from 0deg,
                rgba(255, 0, 102, 0.08), rgba(255, 204, 0, 0.06), rgba(0, 255, 153, 0.06), rgba(0, 153, 255, 0.06), rgba(153, 51, 255, 0.08), rgba(255, 0, 102, 0.08));
        mix-blend-mode: soft-light;
        animation: mother-swirl 30s linear infinite;
        opacity: 0.18;
        z-index: 0;
        filter: blur(2px) saturate(1.1);
    }

    /* subtle grain */
    &.psy::after {
        content: "";
        position: fixed;
        inset: 0;
        pointer-events: none;
        background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='160' height='160'><filter id='n'><feTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='4' stitchTiles='stitch'/><feColorMatrix type='saturate' values='0'/><feComponentTransfer><feFuncA type='table' tableValues='0 0 0 0 0 0.04 0.08 0.12 0.16 0.2'/></feComponentTransfer></filter><rect width='100%' height='100%' filter='url(%23n)'/></svg>");
        opacity: 0.18;
        mix-blend-mode: overlay;
        z-index: 0;
    }
}

// クラス名をdarkに統一
.dark .content-background {
    background-color: var(--background);
    color: var(--foreground);
    box-shadow: 0 10px 15px -3px var(--shadow-color);

    &:hover {
        box-shadow: 0 15px 20px -5px var(--shadow-color);
    }
}

@keyframes mother-swirl {
    0% {
        transform: rotate(0deg) scale(1);
    }

    50% {
        transform: rotate(180deg) scale(1.05);
    }

    100% {
        transform: rotate(360deg) scale(1);
    }
}
